//@author: a0111862m



	/**
	 * origin: c:\Users\BRUCE\Desktop\main\TaskManagerProject\src\main\command\alias\AliasController.java
	 */

public class AliasController {
    private static final String SYMBOL_DELIM = " ";

    private final IAliasStorage aliasStorage;
    private final IFileInputOutput aliasFileInputOutput;

    public AliasController(IAliasStorage aliasStorage,
            IFileInputOutput aliasFileInputOutput) {
        this.aliasStorage = aliasStorage;
        this.aliasFileInputOutput = aliasFileInputOutput;
    }

	// End of segment: c:\Users\BRUCE\Desktop\main\TaskManagerProject\src\main\command\alias\AliasController.java





	/**
	 * origin: c:\Users\BRUCE\Desktop\main\TaskManagerProject\src\main\command\alias\AliasController.java
	 */

    public String replaceAlias(String commandString) {
        commandString = cleanCmdString(commandString);
        beforeAliasCheck();

        if (commandString.isEmpty()) {
            return commandString;
        }

        commandString = tryReplaceWithCustom(commandString);
        return commandString;
    }

	// End of segment: c:\Users\BRUCE\Desktop\main\TaskManagerProject\src\main\command\alias\AliasController.java





	/**
	 * origin: c:\Users\BRUCE\Desktop\main\TaskManagerProject\src\main\command\alias\AliasController.java
	 */

    private void beforeAliasCheck() {
        aliasFileInputOutput.read();
    }

	// End of segment: c:\Users\BRUCE\Desktop\main\TaskManagerProject\src\main\command\alias\AliasController.java





	/**
	 * origin: c:\Users\BRUCE\Desktop\main\TaskManagerProject\src\main\command\alias\AliasController.java
	 */

    private static String cleanCmdString(String cmdString) {
        return stripExtraDelims(cmdString).trim();
    }

	// End of segment: c:\Users\BRUCE\Desktop\main\TaskManagerProject\src\main\command\alias\AliasController.java





	/**
	 * origin: c:\Users\BRUCE\Desktop\main\TaskManagerProject\src\main\command\alias\AliasController.java
	 */

    private static String stripExtraDelims(String s) {
        String doubleDelim = SYMBOL_DELIM + SYMBOL_DELIM;
        while (s.contains(doubleDelim)) {
            s = s.replace(doubleDelim, SYMBOL_DELIM);
        }
        return s;
    }
}

	// End of segment: c:\Users\BRUCE\Desktop\main\TaskManagerProject\src\main\command\alias\AliasController.java





	/**
	 * origin: c:\Users\BRUCE\Desktop\main\TaskManagerProject\src\main\command\EditCommand.java
	 */

    private TaskInfo parseEditParams(String args) {
        Scanner sc = new Scanner(args);
        if (!sc.hasNext()) {
            tryChangeToStartEditModeCommand();
            sc.close();
            return null;
        }
        String editType = sc.next();
        if (!sc.hasNext()) {
            sc.close();
            return null;
        }
        String editParam = "";

        TaskInfo editTask = TaskInfo.createEmpty();

        switch (editType.toLowerCase()) {
            case ARGUMENT_NAME :
                editParam = CommandParser.parseName(sc.nextLine());
                editTask.name = editParam;
                break;
            case ARGUMENT_DESCRIPTION :
            case ARGUMENT_DESCRIPTION_2 :
                editParam = sc.nextLine().trim();
                editTask.details = CommandParser.parseName(editParam);
                break;
            case ARGUMENT_DATE :
            case ARGUMENT_TIME :
            case ARGUMENT_DATETIME :
                editParam = sc.nextLine().trim();
                parseDateTimes(editParam, editTask);
                break;
            case ARGUMENT_TAG :
            case ARGUMENT_TAG_2 :
                editParam = sc.nextLine().trim();
                parseTags(editParam, editTask);
                break;
            case ARGUMENT_PRIORITY :
                editParam = sc.nextLine().trim();
                Priority p = CommandParser.parsePriority("+" + editParam);
                if (p != null) {
                    editTask.priority = p;
                } else {
                    editTask = null;
                }
                break;
            case ARGUMENT_STATUS :
                editParam = sc.nextLine().trim();
                Status s = CommandParser.parseStatus(editParam);
                if (s != null) {
                    editTask.status = s;
                } else {
                    editTask = null;
                }
                break;
            case ARGUMENT_CLEAR :
                editParam = sc.nextLine().trim();
                if (clearInfo(editParam)) {
                    setSpecialOperation(Operation.CLEAR_INFO);
                    editTask = TaskInfo.createEmpty();
                } else {
                    editTask = null;
                }
                break;
            default :
                editTask = null;
        }

        sc.close();

        return editTask;
    }


	// End of segment: c:\Users\BRUCE\Desktop\main\TaskManagerProject\src\main\command\EditCommand.java





	/**
	 * origin: c:\Users\BRUCE\Desktop\main\TaskManagerProject\src\main\command\EditCommand.java
	 */

    private void parseDateTimes(String editParam, TaskInfo editTask) {
        DateTimePair dtPair = CommandParser.parseDateTimes(editParam);
        if (dtPair.isEmpty()) {
            return;
        }

        // either a single date and/or time
        if (!dtPair.hasSecondDate() && !dtPair.hasSecondTime()) {
            if (dtPair.hasFirstDate()) {
                editTask.endDate = dtPair.getFirstDate();
            }
            if (dtPair.hasFirstTime()) {
                editTask.endTime = dtPair.getFirstTime();
            }
        } else {
            // set everything first
            editTask.startDate = dtPair.getFirstDate();
            editTask.startTime = dtPair.getFirstTime();
            editTask.endDate = dtPair.getSecondDate();
            editTask.endTime = dtPair.getSecondTime();

            // handle the case where one value has to be filled in
            if (!dtPair.hasSecondDate()) {
                editTask.endDate = editTask.startDate;
            }
            if (!dtPair.hasSecondTime()) {
                editTask.endTime = editTask.startTime;
            }
        }
    }

	// End of segment: c:\Users\BRUCE\Desktop\main\TaskManagerProject\src\main\command\EditCommand.java





	/**
	 * origin: c:\Users\BRUCE\Desktop\main\TaskManagerProject\src\main\command\EditCommand.java
	 */

    private void parseTags(String editParam, TaskInfo editTask) {
        if (editParam.isEmpty()) {
            return;
        }

        Scanner sc = new Scanner(editParam);
        String changeType = sc.next();

        // ensure it still has a tag to add / delete
        if (sc.hasNext()) {
            String changeTypeLower = changeType.toLowerCase();
            
            if (changeTypeLower.equals("add")) {
                setSpecialOperation(Operation.TAG_ADD);
            }
            if (changeTypeLower.equals("del") ||
                    changeTypeLower.equals("delete")){
                setSpecialOperation(Operation.TAG_DELETE);
            }
        }

        // ensure it is adding / deleting tags
        if (specialOperation == Operation.TAG_ADD ||
                specialOperation == Operation.TAG_DELETE) {
            StringBuilder tags = new StringBuilder();
            while (sc.hasNext()) {
                String tag = sc.next();
                tags.append("#").append(tag).append(" ");
            }
            editTask.tags = CommandParser.parseTags(tags.toString());
        }

        sc.close();
    }
    
	// End of segment: c:\Users\BRUCE\Desktop\main\TaskManagerProject\src\main\command\EditCommand.java





