package manager;

import io.FileInputOutput;
import main.response.Response;
import manager.datamanager.UndoManager;
import manager.result.Result;


/**
 * This is a state manager that keep track of the availability 
 * of executing a certain command.
 * It can also update the state by giving a result generated by managers
 * and return a response to command.
 * @author BRUCE
 *
 */
public class StateManager {

    private final FileInputOutput fileInputOutput;
	private final UndoManager undoManager;
	private State currentState;

	private enum State {
	    AVAILABLE,
	    EDIT_MODE,
	}

	public StateManager(FileInputOutput fileInputOutput, UndoManager undoManager) {
	    this.fileInputOutput = fileInputOutput;
		this.undoManager = undoManager;
	}

	public boolean canAdd() {
		return currentState == State.AVAILABLE;
	}

	public boolean canSearch() {
        return currentState == State.AVAILABLE;
	}

	public boolean canEdit() {
        return currentState == State.AVAILABLE || currentState == State.EDIT_MODE;
	}

	public boolean canDelete() {
        return currentState == State.AVAILABLE || currentState == State.EDIT_MODE;
	}

	public boolean canUndo() {
        return currentState == State.AVAILABLE;
	}
	
	private void setState(State newState) {
	    currentState = newState;
	}
	
	private boolean inState(State state) {
	    return (currentState == state);
	}
    

	/**
	 * Updates the program's state using the result obtained from the managers.
	 * 
	 * @param result
	 * @return
	 */
	public Response update(Result result) {
        
        undoManager.retrieveUndoSnapshot();
        
        switch (result.getType()){
            case EDIT_MODE_START :
                setState(State.EDIT_MODE);
                break;
                
            case EDIT_MODE_END :
                setState(State.AVAILABLE);
                break;
                
            case DELETE_SUCCESS :
                if (inState(State.EDIT_MODE)) {
                    setState(State.AVAILABLE);
                }
                break;
        		     
            default:
                break;
        }
        

        writeToFile();
        throw new UnsupportedOperationException("Not Implemented Yet");    
    }

    
    /**
     * This method is called just before every command execution.
     */
    public void beforeCommandExecutionUpdate() {
        boolean fileChanged = readFromFile();
        
        if (fileChanged) {
            undoManager.clearUndoHistory();
        }
    }

    private boolean readFromFile() {
        return fileInputOutput.read();
    }

    private boolean writeToFile() {
        return fileInputOutput.write();
    }
}
